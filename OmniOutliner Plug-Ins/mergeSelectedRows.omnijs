/*{
    "type": "action",
    "label": "Merge Selected Rows"
}*/
// Twitter: @unlocked2412
(() => {
    // ---------------------- PLUGIN -----------------------
    return Object.assign(
        new PlugIn.Action(selection => {
            'use strict';

            // OMNI JS CODE ---------------------------------------
            const omniJSContext = () => {
                // main :: IO ()
                const main = () => {
                    const
                        // ------- THE ANCESTOR OF FIRST SELECTED ITEM
                        ancestor = selection.items[0].parent,

                        // ------- NEW LINE SEPARATED STRING OF TOPICS
                        topic = compose(
                            unlines,
                            map(x => x.topic)
                        )(selection.items),

                        // ------- CHILD ITEM CREATED BELOW ANCESTOR
                        child = ancestor.addChild(
                            ancestor.beginning,
                            x => x.topic = topic
                        );

                    return (
                        // ------- CHILD ITEM
                        child.topic
                    );
                };


                // FUNCTIONS --
                // https://github.com/RobTrew/prelude-jxa
                // JS Prelude --------------------------------------------------
                // Just :: a -> Maybe a
                const Just = x => ({
                    type: 'Maybe',
                    Nothing: false,
                    Just: x
                });

                // Left :: a -> Either a b
                const Left = x => ({
                    type: 'Either',
                    Left: x
                });

                // Nothing :: Maybe a
                const Nothing = () => ({
                    type: 'Maybe',
                    Nothing: true,
                });

                // Right :: b -> Either a b
                const Right = x => ({
                    type: 'Either',
                    Right: x
                });

                // Tuple (,) :: a -> b -> (a, b)
                const Tuple = a =>
                    b => ({
                        type: 'Tuple',
                        '0': a,
                        '1': b,
                        length: 2
                    });

                // append (++) :: [a] -> [a] -> [a]
                const append = xs =>
                    // A list defined by the
                    // concatenation of two others.
                    ys => xs.concat(ys);

                // bind (>>=) :: Monad m => m a -> (a -> m b) -> m b
                const bind = m =>
                    mf => (Array.isArray(m) ? (
                        bindList
                    ) : (() => {
                        const t = m.type;
                        return 'Either' === t ? (
                            bindLR
                        ) : 'Maybe' === t ? (
                            bindMay
                        ) : 'Tuple' === t ? (
                            bindTuple
                        ) : ('function' === typeof m) ? (
                            bindFn
                        ) : undefined;
                    })()(m)(mf));

                // bindFn (>>=) :: (a -> b) -> (b -> a -> c) -> a -> c
                const bindFn = f =>
                    // Binary operator applied over f x and x.
                    bop => x => bop(f(x))(x);

                // bindLR (>>=) :: Either a -> 
                // (a -> Either b) -> Either b
                const bindLR = m =>
                    mf => undefined !== m.Left ? (
                        m
                    ) : mf(m.Right);

                // bindList (>>=) :: [a] -> (a -> [b]) -> [b]
                const bindList = xs =>
                    mf => [...xs].flatMap(mf);

                // bindMay (>>=) :: Maybe a -> (a -> Maybe b) -> Maybe b
                const bindMay = mb =>
                    // Nothing if mb is Nothing, or the application of the
                    // (a -> Maybe b) function mf to the contents of mb.
                    mf => mb.Nothing ? (
                        mb
                    ) : mf(mb.Just);

                // bindTuple (>>=) :: Monoid a => (a, a) -> (a -> (a, b)) -> (a, b)
                const bindTuple = tpl =>
                    f => {
                        const t2 = f(tpl[1]);
                        return Tuple(mappend(tpl[0])(t2[0]))(
                            t2[1]
                        );
                    };

                // compose (<<<) :: (b -> c) -> (a -> b) -> a -> c
                const compose = (...fs) =>
                    // A function defined by the right-to-left
                    // composition of all the functions in fs.
                    fs.reduce(
                        (f, g) => x => f(g(x)),
                        x => x
                    );

                // concat :: [[a]] -> [a]
                // concat :: [String] -> String
                const concat = xs => (
                    ys => 0 < ys.length ? (
                        ys.every(Array.isArray) ? (
                            []
                        ) : ''
                    ).concat(...ys) : ys
                )(list(xs));

                // identity :: a -> a
                const identity = x =>
                    // The identity function.
                    x;

                // join :: Monad m => m (m a) -> m a
                const join = x =>
                    bind(x)(identity);

                // length :: [a] -> Int
                const length = xs =>
                    // Returns Infinity over objects without finite
                    // length. This enables zip and zipWith to choose
                    // the shorter argument when one is non-finite,
                    // like cycle, repeat etc
                    'GeneratorFunction' !== xs.constructor
                    .constructor.name ? (
                        xs.length
                    ) : Infinity;

                // list :: StringOrArrayLike b => b -> [a]
                const list = xs =>
                    // xs itself, if it is an Array,
                    // or an Array derived from xs.
                    Array.isArray(xs) ? (
                        xs
                    ) : Array.from(xs || []);

                // map :: (a -> b) -> [a] -> [b]
                const map = f =>
                    // The list obtained by applying f
                    // to each element of xs.
                    // (The image of xs under f).
                    xs => [...xs].map(f);

                // mappend (<>) :: Monoid a => a -> a -> a
                const mappend = a =>
                    // Associative operation 
                    // defined for various monoid types.
                    b => (t => (Boolean(t) ? (
                        'Maybe' === t ? (
                            mappendMaybe
                        ) : mappendTuple
                    ) : Array.isArray(a) ? (
                        append
                    ) : 'function' === typeof a ? (
                        mappendFn
                    ) : mappendOrd)(a)(b))(a.type);

                // mappendFn :: Monoid b => (a -> b) -> (a -> b) -> (a -> b)
                const mappendFn = f =>
                    g => x => mappend(f(x))(
                        g(x)
                    );

                // mappendMaybe (<>) :: Maybe a -> Maybe a -> Maybe a
                const mappendMaybe = a =>
                    b => a.Nothing ? (
                        b
                    ) : b.Nothing ? (
                        a
                    ) : Just(
                        mappend(a.Just)(
                            b.Just
                        )
                    );

                // mappendOrd (<>) :: Ordering -> Ordering -> Ordering
                const mappendOrd = x =>
                    y => 0 !== x ? (
                        x
                    ) : y;

                // mappendTuple (<>) :: (a, b) -> (a, b) -> (a, b)
                const mappendTuple = t => t1 =>
                    Tuple(
                        mappend(t[0])(t1[0])
                    )(
                        mappend(t[1])(t1[1])
                    );

                // unlines :: [String] -> String
                const unlines = xs =>
                    // A single string formed by the intercalation
                    // of a list of strings with the newline character.
                    xs.join('\n');

                return main();
            };

            return omniJSContext()

        }), {
            validate: selection => 0 < selection.items.length
        });
})();